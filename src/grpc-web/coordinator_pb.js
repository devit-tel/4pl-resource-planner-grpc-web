// source: coordinator.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.coordinator.ExecResult', null, global);
goog.exportSymbol('proto.coordinator.GetCapacityConstraint', null, global);
goog.exportSymbol('proto.coordinator.GetConstraint', null, global);
goog.exportSymbol('proto.coordinator.GetConstraint.ConstraintCase', null, global);
goog.exportSymbol('proto.coordinator.GetDependentConstraint', null, global);
goog.exportSymbol('proto.coordinator.GetDiscriminationConstraint', null, global);
goog.exportSymbol('proto.coordinator.GetRangeConstraint', null, global);
goog.exportSymbol('proto.coordinator.Int2dList', null, global);
goog.exportSymbol('proto.coordinator.IntList', null, global);
goog.exportSymbol('proto.coordinator.MatrixType', null, global);
goog.exportSymbol('proto.coordinator.OptimizeRule', null, global);
goog.exportSymbol('proto.coordinator.RoutingArguments', null, global);
goog.exportSymbol('proto.coordinator.Rule', null, global);
goog.exportSymbol('proto.coordinator.RulesList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.Rule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coordinator.Rule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.Rule.displayName = 'proto.coordinator.Rule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.OptimizeRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coordinator.OptimizeRule.repeatedFields_, null);
};
goog.inherits(proto.coordinator.OptimizeRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.OptimizeRule.displayName = 'proto.coordinator.OptimizeRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.GetConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.coordinator.GetConstraint.oneofGroups_);
};
goog.inherits(proto.coordinator.GetConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.GetConstraint.displayName = 'proto.coordinator.GetConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.GetCapacityConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coordinator.GetCapacityConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.GetCapacityConstraint.displayName = 'proto.coordinator.GetCapacityConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.GetRangeConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coordinator.GetRangeConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.GetRangeConstraint.displayName = 'proto.coordinator.GetRangeConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.GetDependentConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coordinator.GetDependentConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.GetDependentConstraint.displayName = 'proto.coordinator.GetDependentConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.GetDiscriminationConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coordinator.GetDiscriminationConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.GetDiscriminationConstraint.displayName = 'proto.coordinator.GetDiscriminationConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.RoutingArguments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coordinator.RoutingArguments.repeatedFields_, null);
};
goog.inherits(proto.coordinator.RoutingArguments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.RoutingArguments.displayName = 'proto.coordinator.RoutingArguments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.IntList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coordinator.IntList.repeatedFields_, null);
};
goog.inherits(proto.coordinator.IntList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.IntList.displayName = 'proto.coordinator.IntList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.Int2dList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coordinator.Int2dList.repeatedFields_, null);
};
goog.inherits(proto.coordinator.Int2dList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.Int2dList.displayName = 'proto.coordinator.Int2dList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.ExecResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coordinator.ExecResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.ExecResult.displayName = 'proto.coordinator.ExecResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coordinator.RulesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coordinator.RulesList.repeatedFields_, null);
};
goog.inherits(proto.coordinator.RulesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.coordinator.RulesList.displayName = 'proto.coordinator.RulesList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.Rule.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.Rule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.Rule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.Rule.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: jspb.Message.getFieldWithDefault(msg, 1, ""),
    script: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.Rule}
 */
proto.coordinator.Rule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.Rule;
  return proto.coordinator.Rule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.Rule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.Rule}
 */
proto.coordinator.Rule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScript(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.Rule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.Rule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.Rule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.Rule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScript();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string input = 1;
 * @return {string}
 */
proto.coordinator.Rule.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.Rule} returns this
 */
proto.coordinator.Rule.prototype.setInput = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string script = 2;
 * @return {string}
 */
proto.coordinator.Rule.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.Rule} returns this
 */
proto.coordinator.Rule.prototype.setScript = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.coordinator.Rule.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.Rule} returns this
 */
proto.coordinator.Rule.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coordinator.OptimizeRule.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.OptimizeRule.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.OptimizeRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.OptimizeRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.OptimizeRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: jspb.Message.getFieldWithDefault(msg, 1, ""),
    getvehiclesscript: jspb.Message.getFieldWithDefault(msg, 2, ""),
    getcustomersscript: jspb.Message.getFieldWithDefault(msg, 3, ""),
    getvehicleslatlngsscript: jspb.Message.getFieldWithDefault(msg, 4, ""),
    getcustomerslatlngsscript: jspb.Message.getFieldWithDefault(msg, 5, ""),
    getvehiclesidscript: jspb.Message.getFieldWithDefault(msg, 6, ""),
    getcustomersidscript: jspb.Message.getFieldWithDefault(msg, 7, ""),
    matrixtype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    getconstraintarrayList: jspb.Message.toObjectList(msg.getGetconstraintarrayList(),
    proto.coordinator.GetConstraint.toObject, includeInstance),
    maxprocesstime: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.OptimizeRule}
 */
proto.coordinator.OptimizeRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.OptimizeRule;
  return proto.coordinator.OptimizeRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.OptimizeRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.OptimizeRule}
 */
proto.coordinator.OptimizeRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGetvehiclesscript(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGetcustomersscript(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGetvehicleslatlngsscript(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGetcustomerslatlngsscript(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGetvehiclesidscript(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGetcustomersidscript(value);
      break;
    case 8:
      var value = /** @type {!proto.coordinator.MatrixType} */ (reader.readEnum());
      msg.setMatrixtype(value);
      break;
    case 9:
      var value = new proto.coordinator.GetConstraint;
      reader.readMessage(value,proto.coordinator.GetConstraint.deserializeBinaryFromReader);
      msg.addGetconstraintarray(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxprocesstime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.OptimizeRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.OptimizeRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.OptimizeRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.OptimizeRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGetvehiclesscript();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGetcustomersscript();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGetvehicleslatlngsscript();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGetcustomerslatlngsscript();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGetvehiclesidscript();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGetcustomersidscript();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMatrixtype();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getGetconstraintarrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.coordinator.GetConstraint.serializeBinaryToWriter
    );
  }
  f = message.getMaxprocesstime();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional string input = 1;
 * @return {string}
 */
proto.coordinator.OptimizeRule.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setInput = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string getVehiclesScript = 2;
 * @return {string}
 */
proto.coordinator.OptimizeRule.prototype.getGetvehiclesscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setGetvehiclesscript = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string getCustomersScript = 3;
 * @return {string}
 */
proto.coordinator.OptimizeRule.prototype.getGetcustomersscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setGetcustomersscript = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string getVehiclesLatLngsScript = 4;
 * @return {string}
 */
proto.coordinator.OptimizeRule.prototype.getGetvehicleslatlngsscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setGetvehicleslatlngsscript = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string getCustomersLatLngsScript = 5;
 * @return {string}
 */
proto.coordinator.OptimizeRule.prototype.getGetcustomerslatlngsscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setGetcustomerslatlngsscript = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string getVehiclesIdScript = 6;
 * @return {string}
 */
proto.coordinator.OptimizeRule.prototype.getGetvehiclesidscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setGetvehiclesidscript = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string getCustomersIdScript = 7;
 * @return {string}
 */
proto.coordinator.OptimizeRule.prototype.getGetcustomersidscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setGetcustomersidscript = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional MatrixType matrixType = 8;
 * @return {!proto.coordinator.MatrixType}
 */
proto.coordinator.OptimizeRule.prototype.getMatrixtype = function() {
  return /** @type {!proto.coordinator.MatrixType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.coordinator.MatrixType} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setMatrixtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * repeated GetConstraint getConstraintArray = 9;
 * @return {!Array<!proto.coordinator.GetConstraint>}
 */
proto.coordinator.OptimizeRule.prototype.getGetconstraintarrayList = function() {
  return /** @type{!Array<!proto.coordinator.GetConstraint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coordinator.GetConstraint, 9));
};


/**
 * @param {!Array<!proto.coordinator.GetConstraint>} value
 * @return {!proto.coordinator.OptimizeRule} returns this
*/
proto.coordinator.OptimizeRule.prototype.setGetconstraintarrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.coordinator.GetConstraint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coordinator.GetConstraint}
 */
proto.coordinator.OptimizeRule.prototype.addGetconstraintarray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.coordinator.GetConstraint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.clearGetconstraintarrayList = function() {
  return this.setGetconstraintarrayList([]);
};


/**
 * optional int64 MaxProcessTime = 10;
 * @return {number}
 */
proto.coordinator.OptimizeRule.prototype.getMaxprocesstime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.coordinator.OptimizeRule} returns this
 */
proto.coordinator.OptimizeRule.prototype.setMaxprocesstime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.coordinator.GetConstraint.oneofGroups_ = [[3,4,5,6]];

/**
 * @enum {number}
 */
proto.coordinator.GetConstraint.ConstraintCase = {
  CONSTRAINT_NOT_SET: 0,
  CAPACITYCONSTRAINT: 3,
  RANGECONSTRAINT: 4,
  DEPENDENTCONSTRAINT: 5,
  DISCRIMINATIONCONSTRAINT: 6
};

/**
 * @return {proto.coordinator.GetConstraint.ConstraintCase}
 */
proto.coordinator.GetConstraint.prototype.getConstraintCase = function() {
  return /** @type {proto.coordinator.GetConstraint.ConstraintCase} */(jspb.Message.computeOneofCase(this, proto.coordinator.GetConstraint.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.GetConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.GetConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.GetConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addtoresult: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    capacityconstraint: (f = msg.getCapacityconstraint()) && proto.coordinator.GetCapacityConstraint.toObject(includeInstance, f),
    rangeconstraint: (f = msg.getRangeconstraint()) && proto.coordinator.GetRangeConstraint.toObject(includeInstance, f),
    dependentconstraint: (f = msg.getDependentconstraint()) && proto.coordinator.GetDependentConstraint.toObject(includeInstance, f),
    discriminationconstraint: (f = msg.getDiscriminationconstraint()) && proto.coordinator.GetDiscriminationConstraint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.GetConstraint}
 */
proto.coordinator.GetConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.GetConstraint;
  return proto.coordinator.GetConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.GetConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.GetConstraint}
 */
proto.coordinator.GetConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAddtoresult(value);
      break;
    case 3:
      var value = new proto.coordinator.GetCapacityConstraint;
      reader.readMessage(value,proto.coordinator.GetCapacityConstraint.deserializeBinaryFromReader);
      msg.setCapacityconstraint(value);
      break;
    case 4:
      var value = new proto.coordinator.GetRangeConstraint;
      reader.readMessage(value,proto.coordinator.GetRangeConstraint.deserializeBinaryFromReader);
      msg.setRangeconstraint(value);
      break;
    case 5:
      var value = new proto.coordinator.GetDependentConstraint;
      reader.readMessage(value,proto.coordinator.GetDependentConstraint.deserializeBinaryFromReader);
      msg.setDependentconstraint(value);
      break;
    case 6:
      var value = new proto.coordinator.GetDiscriminationConstraint;
      reader.readMessage(value,proto.coordinator.GetDiscriminationConstraint.deserializeBinaryFromReader);
      msg.setDiscriminationconstraint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.GetConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.GetConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.GetConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddtoresult();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCapacityconstraint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.coordinator.GetCapacityConstraint.serializeBinaryToWriter
    );
  }
  f = message.getRangeconstraint();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.coordinator.GetRangeConstraint.serializeBinaryToWriter
    );
  }
  f = message.getDependentconstraint();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.coordinator.GetDependentConstraint.serializeBinaryToWriter
    );
  }
  f = message.getDiscriminationconstraint();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.coordinator.GetDiscriminationConstraint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.coordinator.GetConstraint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.GetConstraint} returns this
 */
proto.coordinator.GetConstraint.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool addToResult = 2;
 * @return {boolean}
 */
proto.coordinator.GetConstraint.prototype.getAddtoresult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.coordinator.GetConstraint} returns this
 */
proto.coordinator.GetConstraint.prototype.setAddtoresult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional GetCapacityConstraint capacityConstraint = 3;
 * @return {?proto.coordinator.GetCapacityConstraint}
 */
proto.coordinator.GetConstraint.prototype.getCapacityconstraint = function() {
  return /** @type{?proto.coordinator.GetCapacityConstraint} */ (
    jspb.Message.getWrapperField(this, proto.coordinator.GetCapacityConstraint, 3));
};


/**
 * @param {?proto.coordinator.GetCapacityConstraint|undefined} value
 * @return {!proto.coordinator.GetConstraint} returns this
*/
proto.coordinator.GetConstraint.prototype.setCapacityconstraint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.coordinator.GetConstraint.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.coordinator.GetConstraint} returns this
 */
proto.coordinator.GetConstraint.prototype.clearCapacityconstraint = function() {
  return this.setCapacityconstraint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coordinator.GetConstraint.prototype.hasCapacityconstraint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GetRangeConstraint rangeConstraint = 4;
 * @return {?proto.coordinator.GetRangeConstraint}
 */
proto.coordinator.GetConstraint.prototype.getRangeconstraint = function() {
  return /** @type{?proto.coordinator.GetRangeConstraint} */ (
    jspb.Message.getWrapperField(this, proto.coordinator.GetRangeConstraint, 4));
};


/**
 * @param {?proto.coordinator.GetRangeConstraint|undefined} value
 * @return {!proto.coordinator.GetConstraint} returns this
*/
proto.coordinator.GetConstraint.prototype.setRangeconstraint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.coordinator.GetConstraint.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.coordinator.GetConstraint} returns this
 */
proto.coordinator.GetConstraint.prototype.clearRangeconstraint = function() {
  return this.setRangeconstraint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coordinator.GetConstraint.prototype.hasRangeconstraint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GetDependentConstraint dependentConstraint = 5;
 * @return {?proto.coordinator.GetDependentConstraint}
 */
proto.coordinator.GetConstraint.prototype.getDependentconstraint = function() {
  return /** @type{?proto.coordinator.GetDependentConstraint} */ (
    jspb.Message.getWrapperField(this, proto.coordinator.GetDependentConstraint, 5));
};


/**
 * @param {?proto.coordinator.GetDependentConstraint|undefined} value
 * @return {!proto.coordinator.GetConstraint} returns this
*/
proto.coordinator.GetConstraint.prototype.setDependentconstraint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.coordinator.GetConstraint.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.coordinator.GetConstraint} returns this
 */
proto.coordinator.GetConstraint.prototype.clearDependentconstraint = function() {
  return this.setDependentconstraint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coordinator.GetConstraint.prototype.hasDependentconstraint = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GetDiscriminationConstraint discriminationConstraint = 6;
 * @return {?proto.coordinator.GetDiscriminationConstraint}
 */
proto.coordinator.GetConstraint.prototype.getDiscriminationconstraint = function() {
  return /** @type{?proto.coordinator.GetDiscriminationConstraint} */ (
    jspb.Message.getWrapperField(this, proto.coordinator.GetDiscriminationConstraint, 6));
};


/**
 * @param {?proto.coordinator.GetDiscriminationConstraint|undefined} value
 * @return {!proto.coordinator.GetConstraint} returns this
*/
proto.coordinator.GetConstraint.prototype.setDiscriminationconstraint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.coordinator.GetConstraint.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.coordinator.GetConstraint} returns this
 */
proto.coordinator.GetConstraint.prototype.clearDiscriminationconstraint = function() {
  return this.setDiscriminationconstraint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coordinator.GetConstraint.prototype.hasDiscriminationconstraint = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.GetCapacityConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.GetCapacityConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.GetCapacityConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetCapacityConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    transitcostmatrix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    capacities: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.GetCapacityConstraint}
 */
proto.coordinator.GetCapacityConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.GetCapacityConstraint;
  return proto.coordinator.GetCapacityConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.GetCapacityConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.GetCapacityConstraint}
 */
proto.coordinator.GetCapacityConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransitcostmatrix(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCapacities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.GetCapacityConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.GetCapacityConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.GetCapacityConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetCapacityConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransitcostmatrix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCapacities();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string transitCostMatrix = 1;
 * @return {string}
 */
proto.coordinator.GetCapacityConstraint.prototype.getTransitcostmatrix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.GetCapacityConstraint} returns this
 */
proto.coordinator.GetCapacityConstraint.prototype.setTransitcostmatrix = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string capacities = 2;
 * @return {string}
 */
proto.coordinator.GetCapacityConstraint.prototype.getCapacities = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.GetCapacityConstraint} returns this
 */
proto.coordinator.GetCapacityConstraint.prototype.setCapacities = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.GetRangeConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.GetRangeConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.GetRangeConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetRangeConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    transitcostmatrix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pairslist: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.GetRangeConstraint}
 */
proto.coordinator.GetRangeConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.GetRangeConstraint;
  return proto.coordinator.GetRangeConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.GetRangeConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.GetRangeConstraint}
 */
proto.coordinator.GetRangeConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransitcostmatrix(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPairslist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.GetRangeConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.GetRangeConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.GetRangeConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetRangeConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransitcostmatrix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPairslist();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string transitCostMatrix = 1;
 * @return {string}
 */
proto.coordinator.GetRangeConstraint.prototype.getTransitcostmatrix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.GetRangeConstraint} returns this
 */
proto.coordinator.GetRangeConstraint.prototype.setTransitcostmatrix = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pairsList = 2;
 * @return {string}
 */
proto.coordinator.GetRangeConstraint.prototype.getPairslist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.GetRangeConstraint} returns this
 */
proto.coordinator.GetRangeConstraint.prototype.setPairslist = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.GetDependentConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.GetDependentConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.GetDependentConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetDependentConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    dependents: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.GetDependentConstraint}
 */
proto.coordinator.GetDependentConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.GetDependentConstraint;
  return proto.coordinator.GetDependentConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.GetDependentConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.GetDependentConstraint}
 */
proto.coordinator.GetDependentConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDependents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.GetDependentConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.GetDependentConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.GetDependentConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetDependentConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDependents();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string dependents = 1;
 * @return {string}
 */
proto.coordinator.GetDependentConstraint.prototype.getDependents = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.GetDependentConstraint} returns this
 */
proto.coordinator.GetDependentConstraint.prototype.setDependents = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.GetDiscriminationConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.GetDiscriminationConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.GetDiscriminationConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetDiscriminationConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    classes: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.GetDiscriminationConstraint}
 */
proto.coordinator.GetDiscriminationConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.GetDiscriminationConstraint;
  return proto.coordinator.GetDiscriminationConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.GetDiscriminationConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.GetDiscriminationConstraint}
 */
proto.coordinator.GetDiscriminationConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClasses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.GetDiscriminationConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.GetDiscriminationConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.GetDiscriminationConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.GetDiscriminationConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClasses();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string classes = 1;
 * @return {string}
 */
proto.coordinator.GetDiscriminationConstraint.prototype.getClasses = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.GetDiscriminationConstraint} returns this
 */
proto.coordinator.GetDiscriminationConstraint.prototype.setClasses = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coordinator.RoutingArguments.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.RoutingArguments.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.RoutingArguments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.RoutingArguments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.RoutingArguments.toObject = function(includeInstance, msg) {
  var f, obj = {
    matrix: (f = msg.getMatrix()) && proto.coordinator.Int2dList.toObject(includeInstance, f),
    vehicleidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    consumeridsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    constraintresourcearrayList: jspb.Message.toObjectList(msg.getConstraintresourcearrayList(),
    proto.coordinator.IntList.toObject, includeInstance),
    constraintresource2darrayList: jspb.Message.toObjectList(msg.getConstraintresource2darrayList(),
    proto.coordinator.Int2dList.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.RoutingArguments}
 */
proto.coordinator.RoutingArguments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.RoutingArguments;
  return proto.coordinator.RoutingArguments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.RoutingArguments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.RoutingArguments}
 */
proto.coordinator.RoutingArguments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coordinator.Int2dList;
      reader.readMessage(value,proto.coordinator.Int2dList.deserializeBinaryFromReader);
      msg.setMatrix(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addVehicleids(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsumerids(value);
      break;
    case 4:
      var value = new proto.coordinator.IntList;
      reader.readMessage(value,proto.coordinator.IntList.deserializeBinaryFromReader);
      msg.addConstraintresourcearray(value);
      break;
    case 5:
      var value = new proto.coordinator.Int2dList;
      reader.readMessage(value,proto.coordinator.Int2dList.deserializeBinaryFromReader);
      msg.addConstraintresource2darray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.RoutingArguments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.RoutingArguments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.RoutingArguments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.RoutingArguments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatrix();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coordinator.Int2dList.serializeBinaryToWriter
    );
  }
  f = message.getVehicleidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getConsumeridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getConstraintresourcearrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.coordinator.IntList.serializeBinaryToWriter
    );
  }
  f = message.getConstraintresource2darrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.coordinator.Int2dList.serializeBinaryToWriter
    );
  }
};


/**
 * optional Int2dList matrix = 1;
 * @return {?proto.coordinator.Int2dList}
 */
proto.coordinator.RoutingArguments.prototype.getMatrix = function() {
  return /** @type{?proto.coordinator.Int2dList} */ (
    jspb.Message.getWrapperField(this, proto.coordinator.Int2dList, 1));
};


/**
 * @param {?proto.coordinator.Int2dList|undefined} value
 * @return {!proto.coordinator.RoutingArguments} returns this
*/
proto.coordinator.RoutingArguments.prototype.setMatrix = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.clearMatrix = function() {
  return this.setMatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coordinator.RoutingArguments.prototype.hasMatrix = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string vehicleIDs = 2;
 * @return {!Array<string>}
 */
proto.coordinator.RoutingArguments.prototype.getVehicleidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.setVehicleidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.addVehicleids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.clearVehicleidsList = function() {
  return this.setVehicleidsList([]);
};


/**
 * repeated string consumerIDs = 3;
 * @return {!Array<string>}
 */
proto.coordinator.RoutingArguments.prototype.getConsumeridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.setConsumeridsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.addConsumerids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.clearConsumeridsList = function() {
  return this.setConsumeridsList([]);
};


/**
 * repeated IntList ConstraintResourceArray = 4;
 * @return {!Array<!proto.coordinator.IntList>}
 */
proto.coordinator.RoutingArguments.prototype.getConstraintresourcearrayList = function() {
  return /** @type{!Array<!proto.coordinator.IntList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coordinator.IntList, 4));
};


/**
 * @param {!Array<!proto.coordinator.IntList>} value
 * @return {!proto.coordinator.RoutingArguments} returns this
*/
proto.coordinator.RoutingArguments.prototype.setConstraintresourcearrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.coordinator.IntList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coordinator.IntList}
 */
proto.coordinator.RoutingArguments.prototype.addConstraintresourcearray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.coordinator.IntList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.clearConstraintresourcearrayList = function() {
  return this.setConstraintresourcearrayList([]);
};


/**
 * repeated Int2dList ConstraintResource2dArray = 5;
 * @return {!Array<!proto.coordinator.Int2dList>}
 */
proto.coordinator.RoutingArguments.prototype.getConstraintresource2darrayList = function() {
  return /** @type{!Array<!proto.coordinator.Int2dList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coordinator.Int2dList, 5));
};


/**
 * @param {!Array<!proto.coordinator.Int2dList>} value
 * @return {!proto.coordinator.RoutingArguments} returns this
*/
proto.coordinator.RoutingArguments.prototype.setConstraintresource2darrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.coordinator.Int2dList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coordinator.Int2dList}
 */
proto.coordinator.RoutingArguments.prototype.addConstraintresource2darray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.coordinator.Int2dList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.coordinator.RoutingArguments} returns this
 */
proto.coordinator.RoutingArguments.prototype.clearConstraintresource2darrayList = function() {
  return this.setConstraintresource2darrayList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coordinator.IntList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.IntList.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.IntList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.IntList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.IntList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.IntList}
 */
proto.coordinator.IntList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.IntList;
  return proto.coordinator.IntList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.IntList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.IntList}
 */
proto.coordinator.IntList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.IntList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.IntList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.IntList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.IntList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 values = 1;
 * @return {!Array<number>}
 */
proto.coordinator.IntList.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.coordinator.IntList} returns this
 */
proto.coordinator.IntList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.coordinator.IntList} returns this
 */
proto.coordinator.IntList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.coordinator.IntList} returns this
 */
proto.coordinator.IntList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coordinator.Int2dList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.Int2dList.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.Int2dList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.Int2dList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.Int2dList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.coordinator.IntList.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.Int2dList}
 */
proto.coordinator.Int2dList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.Int2dList;
  return proto.coordinator.Int2dList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.Int2dList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.Int2dList}
 */
proto.coordinator.Int2dList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coordinator.IntList;
      reader.readMessage(value,proto.coordinator.IntList.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.Int2dList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.Int2dList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.Int2dList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.Int2dList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.coordinator.IntList.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IntList values = 1;
 * @return {!Array<!proto.coordinator.IntList>}
 */
proto.coordinator.Int2dList.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.coordinator.IntList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coordinator.IntList, 1));
};


/**
 * @param {!Array<!proto.coordinator.IntList>} value
 * @return {!proto.coordinator.Int2dList} returns this
*/
proto.coordinator.Int2dList.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.coordinator.IntList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coordinator.IntList}
 */
proto.coordinator.Int2dList.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.coordinator.IntList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.coordinator.Int2dList} returns this
 */
proto.coordinator.Int2dList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.ExecResult.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.ExecResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.ExecResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.ExecResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, ""),
    logs: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.ExecResult}
 */
proto.coordinator.ExecResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.ExecResult;
  return proto.coordinator.ExecResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.ExecResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.ExecResult}
 */
proto.coordinator.ExecResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.ExecResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.ExecResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.ExecResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.ExecResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogs();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.coordinator.ExecResult.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.ExecResult} returns this
 */
proto.coordinator.ExecResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string logs = 2;
 * @return {string}
 */
proto.coordinator.ExecResult.prototype.getLogs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.coordinator.ExecResult} returns this
 */
proto.coordinator.ExecResult.prototype.setLogs = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coordinator.RulesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coordinator.RulesList.prototype.toObject = function(opt_includeInstance) {
  return proto.coordinator.RulesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coordinator.RulesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.RulesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.coordinator.Rule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coordinator.RulesList}
 */
proto.coordinator.RulesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coordinator.RulesList;
  return proto.coordinator.RulesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coordinator.RulesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coordinator.RulesList}
 */
proto.coordinator.RulesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coordinator.Rule;
      reader.readMessage(value,proto.coordinator.Rule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coordinator.RulesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coordinator.RulesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coordinator.RulesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coordinator.RulesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.coordinator.Rule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Rule rules = 1;
 * @return {!Array<!proto.coordinator.Rule>}
 */
proto.coordinator.RulesList.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.coordinator.Rule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coordinator.Rule, 1));
};


/**
 * @param {!Array<!proto.coordinator.Rule>} value
 * @return {!proto.coordinator.RulesList} returns this
*/
proto.coordinator.RulesList.prototype.setRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.coordinator.Rule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coordinator.Rule}
 */
proto.coordinator.RulesList.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.coordinator.Rule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.coordinator.RulesList} returns this
 */
proto.coordinator.RulesList.prototype.clearRulesList = function() {
  return this.setRulesList([]);
};


/**
 * @enum {number}
 */
proto.coordinator.MatrixType = {
  DISTANCE: 0,
  DURATION: 1
};

goog.object.extend(exports, proto.coordinator);
